/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:rgba(0,0,0,0)}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type=button],[type=reset],[type=submit]{-webkit-appearance:button}button::-moz-focus-inner,[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}html{font-size:62.5%;box-sizing:border-box;scroll-padding-top:0rem;scroll-behavior:smooth}*,*:before,*:after{box-sizing:inherit}body{font-family:"Montserrat",serif;font-optical-sizing:auto;font-style:normal;color:#000;font-size:2rem}body.overflow-hidden{overflow:hidden}p{color:#000;line-height:1.5}.contenedor{width:95%;max-width:120rem;margin:0 auto}a{text-decoration:none}h1,h2,h3{margin:0 0 5rem 0;font-weight:900}h1{font-size:4rem}h2{font-size:4.6rem}h3{font-size:6rem;text-align:center}img{max-width:100%;width:100%;height:auto;display:block}body>section{padding:10rem 0}.no-margin{margin:0}.header{background-color:#4cb8b3}.header.fixed{position:fixed;width:100%;top:0;left:0}.contenido-header{text-align:center;padding:2rem}.contenido-header h1{color:#fff}@media(min-width: 768px){.contenido-header{display:flex;justify-content:space-between}.contenido-header h1{margin:0}}.nav-principal{display:flex;flex-direction:column;gap:2rem}.nav-principal a{color:#fff}.nav-principal a:hover{color:#fdda00}@media(min-width: 768px){.nav-principal{flex-direction:row;align-items:center}}.video{position:relative;min-height:30rem;max-height:60rem;overflow:hidden}.video .overlay{position:absolute;background:linear-gradient(270deg, rgba(117, 47, 151, 0.6), rgba(56.7272727273, 22.7878787879, 73.2121212121, 0.9));inset:0;display:flex;align-items:center}.video video{display:block;width:auto}@media(min-width: 1200px){.video video{width:100%}}.contenido-video{z-index:10}.contenido-video h2{color:#fff;margin:0}.contenido-video p{display:inline-block;padding:1rem 2rem;margin:0;background-color:#f53756;color:#fff;font-weight:700}.sobre-festival{width:95%;max-width:120rem;margin:0 auto}@media(min-width: 768px){.sobre-festival{display:grid;grid-template-columns:repeat(2, 1fr);gap:5rem;align-items:center}}.contenido-festival h2{margin:4rem 0}.contenido-festival .fecha{color:#4cb8b3;font-weight:500;font-size:1.8rem}.lineup{background-color:#f53756}.lineup h3{color:#fff}.lineup .dia{color:#fff;font-size:3rem;text-align:center}.escenarios-contenedor{width:95%;max-width:120rem;margin:0 auto}@media(min-width: 768px){.escenarios-contenedor{display:grid;grid-template-columns:repeat(2, 1fr);gap:5rem;align-items:center}}.escenarios-contenedor .bg-amarillo{background-color:#fdda00}.escenarios-contenedor .bg-amarillo li:nth-child(odd){background-color:rgb(255,226.5019762846,49)}.escenarios-contenedor .bg-verde{background-color:#4cb8b3}.escenarios-contenedor .bg-verde li:nth-child(odd){background-color:rgb(112.516,198.484,194.504)}.escenario .nombre-escenario{font-size:2.5rem;text-align:center}.calendario{padding:0}.calendario li{list-style:none;text-align:center;padding:2rem 0}.galeria{width:95%;max-width:120rem;margin:0 auto}.galeria-imagenes{display:grid;grid-template-columns:repeat(1, 1fr);gap:3rem;align-items:center}@media(min-width: 480px){.galeria-imagenes{display:grid;grid-template-columns:repeat(2, 1fr);gap:3rem;align-items:center}}@media(min-width: 768px){.galeria-imagenes{display:grid;grid-template-columns:repeat(3, 1fr);gap:3rem;align-items:center}}@media(min-width: 1200px){.galeria-imagenes{display:grid;grid-template-columns:repeat(4, 1fr);gap:3rem;align-items:center}}.galeria-imagenes img{object-fit:cover;height:20rem}.modal{display:grid;place-items:center;position:fixed;inset:0;background-color:rgba(0,0,0,.4);animation:fadein ease-in .4s}.modal img{max-width:70rem}.modal.out{animation:fadeout ease-out .6s}.modal-btn{border-radius:40%;font-weight:500;box-shadow:none;border:none;cursor:pointer}@keyframes fadein{0%{opacity:0}100%{opacity:1}}@keyframes fadeout{0%{opacity:1}100%{opacity:0}}.contenedor-boletos{background-color:#4cb8b3}.contenedor-boletos h3{color:#fff}.contenedor-boletos .boletos{width:95%;max-width:120rem;margin:0 auto}@media(min-width: 768px){.contenedor-boletos .boletos{display:grid;grid-template-columns:repeat(2, 1fr);gap:5rem;align-items:center}}.pase{transition:transform ease-in-out .3s}.pase:hover{transform:scale(1.1)}.pase-nombre{text-align:center;font-size:3rem;font-weight:bold;color:#fff;margin:0}.pase-header{background-color:#f53756;padding:1rem}.pase-header p{text-transform:uppercase;margin:0;text-align:center;font-weight:200;color:#fff}.pase-body{background-color:#fff}.pase-body ul{padding:0;margin:0;list-style:none}.pase-body li{list-style:none;text-align:center;padding:2rem 0;border-bottom:solid 1px #e1e1e1}.pase-body li:first-of-type{padding:1rem 0 2rem 0}.pase-footer{background-color:#fff;padding:3rem}.pase-footer p{background-color:#752f97;margin:0;padding:1rem;text-align:center;color:#fff;font-weight:1000;font-size:2.5rem;border-radius:1rem;cursor:pointer;transition:background-color ease-in-out .2s}.pase-footer p:hover{background-color:rgb(86.8636363636,34.8939393939,112.1060606061)}.footer{background-color:#f53756}.footer p{margin:0;padding:1rem;color:#fff;text-align:center;font-weight:500}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
